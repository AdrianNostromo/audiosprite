// Generated by CoffeeScript 1.3.1
(function() {
  var appendFile, argv, async, child_process, files, fs, mktemp, numChannels, optimist, path, spawn, tempFile, wavArgs, winston, _;

  fs = require('fs');

  path = require('path');

  child_process = require('child_process');

  async = require('async');

  _ = require('underscore')._;

  winston = require('winston');

  optimist = require('optimist').options('output', {
    alias: 'o',
    "default": 'output',
    describe: 'Name for the output file.'
  }).options('log', {
    alias: 'l',
    "default": 'info',
    describe: 'Log level (debug, info, notice, warning, error).'
  }).options('help', {
    alias: 'h',
    describe: 'Show this help message.'
  });

  argv = optimist.argv;

  winston.setLevels(winston.config.syslog.levels);

  winston.remove(winston.transports.Console);

  winston.add(winston.transports.Console, {
    colorize: true,
    level: argv.log,
    handleExceptions: true
  });

  winston.debug('Parsed arguments', argv);

  files = _.uniq(argv._);

  if (argv.help || !files.length) {
    if (!argv.help) {
      winston.error('No input files specified.');
    }
    winston.info('Usage: audio-sprite [options] file1.mp3 file2.mp3 *.wav');
    winston.info(optimist.help());
    return;
  }

  mktemp = function(prefix) {
    var tmpdir;
    tmpdir = process.env.TMPDIR || '.';
    return path.join(tmpdir, prefix + '.' + ~~(Math.random() * 1e6));
  };

  spawn = function(name, opt) {
    winston.debug('Spawn', {
      cmd: name + ' ' + opt.join(' ')
    });
    return child_process.spawn(name, opt);
  };

  appendFile = function(src, dest, cb) {
    var duration;
    winston.debug('Start processing', {
      file: src
    });
    duration = 0;
    return path.exists(src, function(exists) {
      var ffmpeg;
      if (!exists) {
        return cb({
          msg: 'File does not exist',
          file: src
        });
      }
      ffmpeg = spawn('ffmpeg', ['-i', path.resolve(src)].concat(wavArgs).concat('pipe:'));
      ffmpeg.stdout.pipe(fs.createWriteStream(dest, {
        flags: 'a'
      }));
      ffmpeg.stderr.on('data', function(data) {
        var match;
        if (match = data.toString('utf8').match(/\s*Duration:\s+(\d+):(\d+):(\d+\.\d+)/)) {
          duration = parseInt(match[1], 10) * 3600 + parseInt(match[2], 10) * 60 + parseFloat(match[3]);
          return winston.debug('Parsed duration', {
            file: src,
            duration: duration
          });
        }
      });
      return ffmpeg.on('exit', function(code, signal) {
        if (code) {
          return cb({
            msg: 'File could not be added',
            file: src,
            retcode: code,
            signal: signal
          });
        }
        winston.info('File added OK', {
          file: src
        });
        return cb();
      });
    });
  };

  numChannels = 1;

  wavArgs = ['-ar', '44100', '-acodec', 'pcm_s16le', '-ac', numChannels, '-f', 's16le'];

  tempFile = mktemp('audio-sprite');

  winston.debug('Created temporary file', {
    file: tempFile
  });

  async.forEachSeries(files, function(file, cb) {
    return appendFile(file, tempFile, cb);
  }, function(err) {
    if (err) {
      return winston.error('Error processing file', err);
    }
    return winston.info('All done');
  });

}).call(this);
